# -*- coding: utf-8 -*-
"""proyeccion_nodos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aI0nGD4IYzZRLIKnCF_FoQGOKPlybORI
"""

pip install networkx

import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx

# Datos iniciales
num_buses = 16
capacidad_bus = 72
precio_adulto_mayor = 1.0
precio_resto = 1.5
costo_diesel_por_litro = 3.72

# Datos de las rutas
distancia_norte = 15  # km ida y vuelta
distancia_sur = 20  # km ida y vuelta
consumo_diesel_km = 0.95  # litros/km

# Demanda de pasajeros por semana
demanda_norte = 400
demanda_sur = 600

# Cálculos de consumo y costos de diesel
consumo_diesel_norte = distancia_norte * consumo_diesel_km
consumo_diesel_sur = distancia_sur * consumo_diesel_km
costo_diesel_norte = consumo_diesel_norte * costo_diesel_por_litro
costo_diesel_sur = consumo_diesel_sur * costo_diesel_por_litro

# Distribución de pasajeros por bus
pasajeros_adultos_mayores_por_bus = capacidad_bus * 0.2
pasajeros_resto_por_bus = capacidad_bus * 0.8
ingreso_por_bus = (pasajeros_adultos_mayores_por_bus * precio_adulto_mayor) + (pasajeros_resto_por_bus * precio_resto)

# Cálculos de ingresos y costos por bus
ingreso_neto_norte_por_bus = ingreso_por_bus - costo_diesel_norte
ingreso_neto_sur_por_bus = ingreso_por_bus - costo_diesel_sur

# Asignación de buses
buses_norte = demanda_norte // capacidad_bus + (1 if demanda_norte % capacidad_bus > 0 else 0)
buses_sur = demanda_sur // capacidad_bus + (1 if demanda_sur % capacidad_bus > 0 else 0)

# Ajuste de número de buses si excede el total disponible
if buses_norte + buses_sur > num_buses:
    if ingreso_neto_norte_por_bus > ingreso_neto_sur_por_bus:
        buses_norte = min(buses_norte, num_buses)
        buses_sur = min(num_buses - buses_norte, buses_sur)
    else:
        buses_sur = min(buses_sur, num_buses)
        buses_norte = min(num_buses - buses_sur, buses_norte)

# Recalcular ingresos y costos totales
ingreso_total_norte = buses_norte * ingreso_por_bus
ingreso_total_sur = buses_sur * ingreso_por_bus
costo_total_diesel_norte = buses_norte * costo_diesel_norte
costo_total_diesel_sur = buses_sur * costo_diesel_sur
ingreso_neto_total_norte = ingreso_total_norte - costo_total_diesel_norte
ingreso_neto_total_sur = ingreso_total_sur - costo_total_diesel_sur

# Datos para gráficos
rutas = ['Ruta Norte', 'Ruta Sur']
ingresos_totales = [ingreso_total_norte, ingreso_total_sur]
costos_totales_diesel = [costo_total_diesel_norte, costo_total_diesel_sur]
ingresos_netos_totales = [ingreso_neto_total_norte, ingreso_neto_total_sur]

# Graficos de ingresos y costos
fig, ax = plt.subplots(3, 1, figsize=(10, 15))

ax[0].bar(rutas, ingresos_totales, color='green')
ax[0].set_title('Ingresos Totales por Ruta')
ax[0].set_ylabel('Ingresos (Bs)')
ax[0].set_xlabel('Rutas')

ax[1].bar(rutas, costos_totales_diesel, color='red')
ax[1].set_title('Costos Totales de Diesel por Ruta')
ax[1].set_ylabel('Costos (Bs)')
ax[1].set_xlabel('Rutas')

ax[2].bar(rutas, ingresos_netos_totales, color='blue')
ax[2].set_title('Ingresos Netos Totales por Ruta')
ax[2].set_ylabel('Ingresos Netos (Bs)')
ax[2].set_xlabel('Rutas')

plt.tight_layout()

# Grafo de rutas
G = nx.DiGraph()

# Nodo central (Estación de buses)
G.add_node('Estación')

# Nodos de las rutas
nodos_norte = [f'Parada Norte {i+1}' for i in range(7)]
nodos_sur = [f'Parada Sur {i+1}' for i in range(7)]

# Añadir nodos al grafo
G.add_nodes_from(nodos_norte)
G.add_nodes_from(nodos_sur)

# Añadir aristas (Estación a cada nodo de ruta de manera secuencial)
for i in range(len(nodos_norte)):
    if i == 0:
        G.add_edge('Estación', nodos_norte[i])
    else:
        G.add_edge(nodos_norte[i-1], nodos_norte[i])

for i in range(len(nodos_sur)):
    if i == 0:
        G.add_edge('Estación', nodos_sur[i])
    else:
        G.add_edge(nodos_sur[i-1], nodos_sur[i])

# Dibujar el grafo
pos = nx.spring_layout(G)
plt.figure(figsize=(12, 12))
nx.draw(G, pos, with_labels=True, node_size=3000, node_color="skyblue", font_size=10, font_weight="bold", arrows=True)
plt.title('Grafo de Rutas de Buses')
plt.show()